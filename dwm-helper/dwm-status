#!/bin/sh
#
# +-------------------------------------------------------------------------+
# | dwm_status                                                              |
# +-------------------------------------------------------------------------+
# | Copyright © 2020 Waldemar Schroeer                                      |
# |                  waldemar.schroeer(at)rz-amper.de                       |
# +-------------------------------------------------------------------------+

print_mem_used() {
    mem_used="$(free -m | grep "Mem" | awk '{print $3}')"
    mem_free="$(free -m | grep "Mem" | awk '{print $4}')"
    printf " Used:${mem_used}MB|Free:${mem_free}MB"
}

print_datetime() {
    locdate="$(date "+%A %d.%m.%Y")"
    loctime="$(date "+%H:%M")"
    # usctime="$(TZ=US/Central date "+%H:%M")"
    # datetime="$(date "+%a %d %b  %H:%M")"
    # printf " ${locdate}  ${loctime}  ${usctime}"
    printf " ${locdate}  ${loctime}"
}

print_battery() {
    bcapacity=$(cat /sys/class/power_supply/BAT0/capacity)
    bstatus=$(cat /sys/class/power_supply/BAT0/status)
    printf " ${bcapacity}%%"
}

print_volume() {
    var="$(amixer sget Master | grep -F 'Left:')"
    case $var in
        *'[on]')
            # volume="$(amixer sget Master | awk -F 'Left:|[][%]' 'BEGIN{RS=""}{ print $3 }' )"
            volume="$(echo ${var} | awk -F 'Left:|[][%]' 'BEGIN{RS=""}{ print $3 }' )"
            if [ "${volume}" -le 50 ]; then
                printf " ${volume}%%"
            elif [ "${volume}" -le 100 ]; then
                printf " ${volume}%%"
            fi
        ;;       
        *'[off]')
            printf " [M]"
        ;;
    esac
}

print_temperature() {
    tempcpu="$(sensors | grep "CPU Temp" | awk '{print $3}')"
    tempgpu="$(echo "$(cat /sys/class/drm/card0/device/hwmon/hwmon2/temp1_input) / 1000" | bc)"
    printf "CPU:${tempcpu} GPU:+${tempgpu}°C"
}

print_appleicons() {
    printf "    "
}

while true; do
    # get new cpu idle and total usage
    eval $(awk '/^cpu /{print "cpu_idle_now=" $5 "; cpu_total_now=" $2+$3+$4+$5 }' /proc/stat)
    cpu_interval=$((cpu_total_now-${cpu_total_old:-0}))

    # calculate cpu usage (%)
    let cpu_used="100 * ($cpu_interval - ($cpu_idle_now-${cpu_idle_old:-0})) / $cpu_interval"

    print_cpu_used() {
        printf " ${cpu_used}%%"
    }

    # xsetroot -name "$(print_appleicons) $(print_volume) $(print_battery) $(print_temperature) $(print_cpu_used) $(print_mem_used) $(print_datetime)"
    # xsetroot -name "$(print_volume) $(print_battery) $(print_temperature) $(print_cpu_used) $(print_mem_used) $(print_datetime)"
    # xsetroot -name "$(print_volume) $(print_battery) $(print_cpu_used) $(print_mem_used) $(print_datetime)"
    # xsetroot -name "$(print_volume) $(print_cpu_used) $(print_mem_used) $(print_datetime)"
    xsetroot -name "$(print_volume) $(print_temperature) $(print_cpu_used) $(print_mem_used) $(print_datetime)"

    # reset old rates
    cpu_idle_old=$cpu_idle_now
    cpu_total_old=$cpu_total_now

    # loop stats every 1 second
    sleep 1s
done &
